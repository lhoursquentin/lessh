#! /bin/bash

usage()
{
  cat <<'EOF'
Usage: lessh [OPTION]... [input-file]

  -h, --help  display this help and exit

If no imput file is specified, then the standard input is read
EOF
  exit "$1"
}

leave() {
  tput cnorm
  tput rmcup
  tput rc
  exit
}

print_line() {
  printf '%s\n' "$output" | sed -n "$1"p
}

# TODO cache value?
screen_nb_lines() {
  printf '%s\n' "$(($(tput lines) - 1))"
}

process_input() {
  clear
  index=1
  output=
  nb_lines=0
  while IFS= read -r line; do
    output="$output$line
"
    nb_lines="$((nb_lines + 1))"
    if [ "$nb_lines" -le "$(screen_nb_lines)" ]; then
      printf '%s\n' "$line"
    fi
  done
  print_status_bar
}

print_bar() {
  color="$1"
  shift
  tput cup "$(($(screen_nb_lines) + 1))" 0
  printf '%b%s' "$color" "$padding"
  tput cup "$(($(screen_nb_lines) + 1))" 0
  printf "$@"
}

print_status_bar() {
  status_msg="$error_msg"
  # FIXME dash fails when variable in substitution contains spaces
  #+Need to check if there's another way
  #+This is also pretty dirty
  : "${status_msg:=$success_msg}"
  : "${status_msg:=Press q to quit}"
  print_bar '\e[48;5;8m' '\e[1m%s%b%s' \
    "${filename+File: $filename - }" \
    "${success_msg:+\e[1;32m}${error_msg:+\e[1;31m}" \
    "$status_msg"
  printf '\e[0m'
  error_msg=
  success_msg=
}

scroll_up() {
  next_line_num="$((index - 1))"
  if [ "$next_line_num" -ge 1 ]; then
    index="$next_line_num"
    tput cup 0 0
    tput il 1
    print_line "$next_line_num"
    print_status_bar
  fi
}

scroll_down() {
  next_line_num="$((index + $(screen_nb_lines)))"
  if [ "$next_line_num" -le "$nb_lines" ]; then
    index="$((index + 1))"
    tput cup "$(screen_nb_lines)" 0
    tput el 1
    print_line "$next_line_num"
    print_status_bar
  fi
}

bar_handler() {
  key="$1"
  color="$2"
  action_func="$3"
  print_bar "$color" "$key"
  tput cnorm
  enter=false
  if IFS= read -r input; then
    enter=true
    index="$((index + 1))"
  fi
  printf '\e[0m'
  tput civis
  if ! {
         [ -n "$input" ] &&
         printf '%s\n' "$key$input" >> ~/.lessh_history &&
         "$action_func" "$input"
       }
  then
    if "$enter"; then
      tput cup "$(screen_nb_lines)" 0
      tput el 1
      scroll_up
    else
      print_status_bar
    fi
  fi
}

action_handler() {
  error_msg="$1"
  shift
  if new_output="$(printf '%s\n' "$output" | "$@" 2> "$stderr_file")"; then
    error_msg= #FIXME dirty
    output="$new_output"
    unset new_output
    lines="$(printf '%s\n' "$output" | wc -l)"
    clear
    index=1
    print_line "1,$(screen_nb_lines)"
    print_status_bar
    return 0
  else
    return 1
  fi
}

eval_exec() {
  action_handler "Command '$1' failed" eval "$1"
}

search_exec() {
  # FIXME grep always returns 0 because of |$, need to find another way
  action_handler 'No occurence found' grep --color=always -- "$1"'\|$'
}

builtin_cmd_exec() {
  # FIXME forcing IFS splitting is a bad idea
  set -- $1
  case "$1" in
    q|quit)
      leave
      ;;
    o|open)
      if [ -f "$2" ]; then
        filename="$2"
        success_msg="Successfully opened file: '$2' "
        process_input < "$2"
      elif [ -z "$2" ]; then
        error_msg='No file provided'
        return 1
      else
        error_msg="No such file or directory: '$2'"
        return 1
      fi
      ;;
    *)
      error_msg="Unknown command: '$*'"
      return 1
      ;;
  esac
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage 0
      shift
      ;;
    *)
      # TODO add multiple files support
      [ -n "$filename" ] && usage 1
      if [ ! -f "$1" ];then
        printf '%s: No such file or directory\n' "$1" >&2
        usage 1
      fi
      filename="$1"
      shift
      ;;
  esac
done

readonly stderr_file=/tmp/lessh_stderr

trap leave INT TERM

tput sc
tput smcup
tput civis

# FIXME also needs to be recalculated in case of screen size modification
padding="$(for i in $(seq "$(tput cols)"); do printf ' '; done; printf x)"
padding="${padding%?}"

if [ -n "$filename" ]; then
  process_input < "$filename"
else
  process_input
fi

while read -n 1 -s key; do
  case "$key" in
    f)
      scroll_down
      ;;
    b)
      scroll_up
      ;;
    q)
      leave
      ;;
    '/')
      bar_handler "$key" '\e[1;45m' search_exec
      ;;
    '>')
      bar_handler "$key " '\e[1;44m' eval_exec
      ;;
    ':')
      bar_handler "$key" '\e[1;43m' builtin_cmd_exec
      ;;
  esac
done < /dev/tty
